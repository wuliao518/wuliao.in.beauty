package wuliao.in.beauty.dao;

import java.util.List;
import wuliao.in.beauty.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table wu_subject.
 */
public class Sbject {

    private Long subject_id;
    private Long user_id;
    /** Not-null value. */
    private String sub_title;
    /** Not-null value. */
    private String add_time;
    /** Not-null value. */
    private String modify_time;
    /** Not-null value. */
    private String page_photo;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SbjectDao myDao;

    private User user;
    private Long user__resolvedKey;

    private List<Source> sources;

    public Sbject() {
    }

    public Sbject(Long subject_id) {
        this.subject_id = subject_id;
    }

    public Sbject(Long subject_id, Long user_id, String sub_title, String add_time, String modify_time, String page_photo) {
        this.subject_id = subject_id;
        this.user_id = user_id;
        this.sub_title = sub_title;
        this.add_time = add_time;
        this.modify_time = modify_time;
        this.page_photo = page_photo;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSbjectDao() : null;
    }

    public Long getSubject_id() {
        return subject_id;
    }

    public void setSubject_id(Long subject_id) {
        this.subject_id = subject_id;
    }

    public Long getUser_id() {
        return user_id;
    }

    public void setUser_id(Long user_id) {
        this.user_id = user_id;
    }

    /** Not-null value. */
    public String getSub_title() {
        return sub_title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSub_title(String sub_title) {
        this.sub_title = sub_title;
    }

    /** Not-null value. */
    public String getAdd_time() {
        return add_time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAdd_time(String add_time) {
        this.add_time = add_time;
    }

    /** Not-null value. */
    public String getModify_time() {
        return modify_time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setModify_time(String modify_time) {
        this.modify_time = modify_time;
    }

    /** Not-null value. */
    public String getPage_photo() {
        return page_photo;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPage_photo(String page_photo) {
        this.page_photo = page_photo;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.user_id;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            user_id = user == null ? null : user.getUser_id();
            user__resolvedKey = user_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Source> getSources() {
        if (sources == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SourceDao targetDao = daoSession.getSourceDao();
            List<Source> sourcesNew = targetDao._querySbject_Sources(subject_id);
            synchronized (this) {
                if(sources == null) {
                    sources = sourcesNew;
                }
            }
        }
        return sources;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSources() {
        sources = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
