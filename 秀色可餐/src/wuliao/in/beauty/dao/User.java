package wuliao.in.beauty.dao;

import java.util.List;
import wuliao.in.beauty.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table wu_user.
 */
public class User {

    private Long user_id;
    /** Not-null value. */
    private String user_name;
    /** Not-null value. */
    private String password;
    /** Not-null value. */
    private String email;
    /** Not-null value. */
    private String user_img;
    private String user_info;
    private String add_time;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<Sbject> subjects;

    public User() {
    }

    public User(Long user_id) {
        this.user_id = user_id;
    }

    public User(Long user_id, String user_name, String password, String email, String user_img, String user_info, String add_time) {
        this.user_id = user_id;
        this.user_name = user_name;
        this.password = password;
        this.email = email;
        this.user_img = user_img;
        this.user_info = user_info;
        this.add_time = add_time;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getUser_id() {
        return user_id;
    }

    public void setUser_id(Long user_id) {
        this.user_id = user_id;
    }

    /** Not-null value. */
    public String getUser_name() {
        return user_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUser_name(String user_name) {
        this.user_name = user_name;
    }

    /** Not-null value. */
    public String getPassword() {
        return password;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPassword(String password) {
        this.password = password;
    }

    /** Not-null value. */
    public String getEmail() {
        return email;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmail(String email) {
        this.email = email;
    }

    /** Not-null value. */
    public String getUser_img() {
        return user_img;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUser_img(String user_img) {
        this.user_img = user_img;
    }

    public String getUser_info() {
        return user_info;
    }

    public void setUser_info(String user_info) {
        this.user_info = user_info;
    }

    public String getAdd_time() {
        return add_time;
    }

    public void setAdd_time(String add_time) {
        this.add_time = add_time;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Sbject> getSubjects() {
        if (subjects == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SbjectDao targetDao = daoSession.getSbjectDao();
            List<Sbject> subjectsNew = targetDao._queryUser_Subjects(user_id);
            synchronized (this) {
                if(subjects == null) {
                    subjects = subjectsNew;
                }
            }
        }
        return subjects;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSubjects() {
        subjects = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
