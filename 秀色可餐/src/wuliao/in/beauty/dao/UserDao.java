package wuliao.in.beauty.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import wuliao.in.beauty.dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table wu_user.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "wu_user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property User_id = new Property(0, Long.class, "user_id", true, "USER_ID");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "USER_NAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property User_img = new Property(4, String.class, "user_img", false, "USER_IMG");
        public final static Property User_info = new Property(5, String.class, "user_info", false, "USER_INFO");
        public final static Property Add_time = new Property(6, String.class, "add_time", false, "ADD_TIME");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'wu_user' (" + //
                "'USER_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: user_id
                "'USER_NAME' TEXT NOT NULL ," + // 1: user_name
                "'PASSWORD' TEXT NOT NULL ," + // 2: password
                "'EMAIL' TEXT NOT NULL ," + // 3: email
                "'USER_IMG' TEXT NOT NULL ," + // 4: user_img
                "'USER_INFO' TEXT," + // 5: user_info
                "'ADD_TIME' TEXT);"); // 6: add_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'wu_user'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(1, user_id);
        }
        stmt.bindString(2, entity.getUser_name());
        stmt.bindString(3, entity.getPassword());
        stmt.bindString(4, entity.getEmail());
        stmt.bindString(5, entity.getUser_img());
 
        String user_info = entity.getUser_info();
        if (user_info != null) {
            stmt.bindString(6, user_info);
        }
 
        String add_time = entity.getAdd_time();
        if (add_time != null) {
            stmt.bindString(7, add_time);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // user_id
            cursor.getString(offset + 1), // user_name
            cursor.getString(offset + 2), // password
            cursor.getString(offset + 3), // email
            cursor.getString(offset + 4), // user_img
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_info
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // add_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_name(cursor.getString(offset + 1));
        entity.setPassword(cursor.getString(offset + 2));
        entity.setEmail(cursor.getString(offset + 3));
        entity.setUser_img(cursor.getString(offset + 4));
        entity.setUser_info(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAdd_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUser_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
